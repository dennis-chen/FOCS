let rec setIn (e,xs) =
    match xs with
    | [] -> false
    | h::t -> if (compare h e) == 0 then true else setIn (e,t)

let rec setSub (xs,ys) =
    match xs with
    | [] -> true
    | h::t -> if setIn(h,ys) then setSub(t,ys) else false

let rec notIn xs ys =
(*return all elems of xs not in ys*)
    match xs with
    | [] -> []
    | h::t -> if setIn(h,ys) then notIn t ys else h::notIn t ys

let setEqual (xs,ys) = setSub(xs,ys) && setSub(ys,xs)

let q2_b_m = 
[ ""; "a"; "b"; "aa"; "ba"; "ab"; "bb"; "aaa"; "baa"; "aba"; "bba"; "aab"; "bab"; "abb"; "bbb"; "baaa"; "abaa"; "bbaa"; "aaba"; "baba"; "abba"; "bbba"; "aaab"; "baab"; "abab"; "bbab"; "aabb"; "babb"; "abbb"; "abaaa"; "bbaaa"; "aabaa"; "babaa"; "abbaa"; "bbbaa"; "aaaba"; "baaba"; "ababa"; "bbaba"; "aabba"; "babba"; "abbba"; "baaab"; "abaab"; "bbaab"; "aabab"; "babab"; "abbab"; "bbbab"; "aaabb"; "baabb"; "ababb"; "bbabb"; "aabbb"; "babbb"; "aabaaa"; "babaaa"; "abbaaa"; "bbbaaa"; "aaabaa"; "baabaa"; "ababaa"; "bbabaa"; "aabbaa"; "babbaa"; "abbbaa"; "baaaba"; "abaaba"; "bbaaba"; "aababa"; "bababa"; "abbaba"; "bbbaba"; "aaabba"; "baabba"; "ababba"; "bbabba"; "aabbba"; "babbba"; "abaaab"; "bbaaab"; "aabaab"; "babaab"; "abbaab"; "bbbaab"; "aaabab"; "baabab"; "ababab"; "bbabab"; "aabbab"; "babbab"; "abbbab"; "baaabb"; "abaabb"; "bbaabb"; "aababb"; "bababb"; "abbabb"; "bbbabb"; "aaabbb"; "baabbb"; "ababbb"; "bbabbb"; "aaabaaa"; "baabaaa"; "ababaaa"; "bbabaaa"; "aabbaaa"; "babbaaa"; "abbbaaa"; "baaabaa"; "abaabaa"; "bbaabaa"; "aababaa"; "bababaa"; "abbabaa"; "bbbabaa"; "aaabbaa"; "baabbaa"; "ababbaa"; "bbabbaa"; "aabbbaa"; "babbbaa"; "abaaaba"; "bbaaaba"; "aabaaba"; "babaaba"; "abbaaba"; "bbbaaba"; "aaababa"; "baababa"; "abababa"; "bbababa"; "aabbaba"; "babbaba"; "abbbaba"; "baaabba"; "abaabba"; "bbaabba"; "aababba"; "bababba"; "abbabba"; "bbbabba"; "aaabbba"; "baabbba"; "ababbba"; "bbabbba"; "aabaaab"; "babaaab"; "abbaaab"; "bbbaaab"; "aaabaab"; "baabaab"; "ababaab"; "bbabaab"; "aabbaab"; "babbaab"; "abbbaab"; "baaabab"; "abaabab"; "bbaabab"; "aababab"; "bababab"; "abbabab"; "bbbabab"; "aaabbab"; "baabbab"; "ababbab"; "bbabbab"; "aabbbab"; "babbbab"; "abaaabb"; "bbaaabb"; "aabaabb"; "babaabb"; "abbaabb"; "bbbaabb"; "aaababb"; "baababb"; "abababb"; "bbababb"; "aabbabb"; "babbabb"; "abbbabb"; "baaabbb"; "abaabbb"; "bbaabbb"; "aababbb"; "bababbb"; "abbabbb"; "bbbabbb"] 

let q2_b_a = 
[ ""; "a"; "b"; "aa"; "ba"; "ab"; "bb"; "aaa"; "baa"; "aba"; "bba"; "aab"; "bab"; "abb"; "bbb"; "baaa"; "abaa"; "bbaa"; "aaba"; "baba"; "abba"; "bbba"; "aaab"; "baab"; "abab"; "bbab"; "aabb"; "babb"; "abbb"; "abaaa"; "bbaaa"; "aabaa"; "babaa"; "abbaa"; "bbbaa"; "aaaba"; "baaba"; "ababa"; "bbaba"; "aabba"; "babba"; "abbba"; "baaab"; "abaab"; "bbaab"; "aabab"; "babab"; "abbab"; "bbbab"; "aaabb"; "baabb"; "ababb"; "bbabb"; "aabbb"; "babbb"; "aabaaa"; "babaaa"; "abbaaa"; "bbbaaa"; "aaabaa"; "baabaa"; "ababaa"; "bbabaa"; "aabbaa"; "babbaa"; "abbbaa"; "baaaba"; "abaaba"; "bbaaba"; "aababa"; "bababa"; "abbaba"; "bbbaba"; "aaabba"; "baabba"; "ababba"; "bbabba"; "aabbba"; "babbba"; "abaaab"; "bbaaab"; "aabaab"; "babaab"; "abbaab"; "bbbaab"; "aaabab"; "baabab"; "ababab"; "bbabab"; "aabbab"; "babbab"; "abbbab"; "baaabb"; "abaabb"; "bbaabb"; "aababb"; "bababb"; "abbabb"; "bbbabb"; "aaabbb"; "baabbb"; "ababbb"; "bbabbb"; "aaabaaa"; "baabaaa"; "ababaaa"; "bbabaaa"; "aabbaaa"; "babbaaa"; "abbbaaa"; "baaabaa"; "abaabaa"; "bbaabaa"; "aababaa"; "bababaa"; "abbabaa"; "bbbabaa"; "aaabbaa"; "baabbaa"; "ababbaa"; "bbabbaa"; "aabbbaa"; "babbbaa"; "abaaaba"; "bbaaaba"; "aabaaba"; "babaaba"; "abbaaba"; "bbbaaba"; "aaababa"; "baababa"; "abababa"; "bbababa"; "aabbaba"; "babbaba"; "abbbaba"; "baaabba"; "abaabba"; "bbaabba"; "aababba"; "bababba"; "abbabba"; "bbbabba"; "aaabbba"; "baabbba"; "ababbba"; "bbabbba"; "aabaaab"; "babaaab"; "abbaaab"; "bbbaaab"; "aaabaab"; "baabaab"; "ababaab"; "bbabaab"; "aabbaab"; "babbaab"; "abbbaab"; "baaabab"; "abaabab"; "bbaabab"; "aababab"; "bababab"; "abbabab"; "bbbabab"; "aaabbab"; "baabbab"; "ababbab"; "bbabbab"; "aabbbab"; "babbbab"; "abaaabb"; "bbaaabb"; "aabaabb"; "babaabb"; "abbaabb"; "bbbaabb"; "aaababb"; "baababb"; "abababb"; "bbababb"; "aabbabb"; "babbabb"; "abbbabb"; "baaabbb"; "abaabbb"; "bbaabbb"; "aababbb"; "bababbb"; "abbabbb"; "bbbabbb"]

let q2_c_a = 
[ "aaa"; "bbb"; "aaaa"; "bbbb"; "aaaaa"; "bbbbb"; "aaaaaa"; "bbbaaa"; "aaabbb"; "bbbbbb"; "aaaaaaa"; "bbbaaaa"; "bbbbaaa"; "aaaabbb"; "aaabbbb"; "bbbbbbb"; "aaaaaaaa"; "bbbaaaaa"; "bbbbaaaa"; "bbbbbaaa"; "aaaaabbb"; "aaaabbbb"; "aaabbbbb"; "bbbbbbbb"; "aaaaaaaaa"; "bbbaaaaaa"; "bbbbaaaaa"; "bbbbbaaaa"; "aaabbbaaa"; "bbbbbbaaa"; "aaaaaabbb"; "bbbaaabbb"; "aaaaabbbb"; "aaaabbbbb"; "aaabbbbbb"; "bbbbbbbbb"; "aaaaaaaaaa"; "bbbaaaaaaa"; "bbbbaaaaaa"; "bbbbbaaaaa"; "aaabbbaaaa"; "bbbbbbaaaa"; "aaaabbbaaa"; "aaabbbbaaa"; "bbbbbbbaaa"; "aaaaaaabbb"; "bbbaaaabbb"; "bbbbaaabbb"; "aaaaaabbbb"; "bbbaaabbbb"; "aaaaabbbbb"; "aaaabbbbbb"; "aaabbbbbbb"; "bbbbbbbbbb"; "aaaaaaaaaaa"; "bbbaaaaaaaa"; "bbbbaaaaaaa"; "bbbbbaaaaaa"; "aaabbbaaaaa"; "bbbbbbaaaaa"; "aaaabbbaaaa"; "aaabbbbaaaa"; "bbbbbbbaaaa"; "aaaaabbbaaa"; "aaaabbbbaaa"; "aaabbbbbaaa"; "bbbbbbbbaaa"; "aaaaaaaabbb"; "bbbaaaaabbb"; "bbbbaaaabbb"; "bbbbbaaabbb"; "aaaaaaabbbb"; "bbbaaaabbbb"; "bbbbaaabbbb"; "aaaaaabbbbb"; "bbbaaabbbbb"; "aaaaabbbbbb"; "aaaabbbbbbb"; "aaabbbbbbbb"; "bbbbbbbbbbb"; "aaaaaaaaaaaa"; "bbbaaaaaaaaa"; "bbbbaaaaaaaa"; "bbbbbaaaaaaa"; "aaabbbaaaaaa"; "bbbbbbaaaaaa"; "aaaabbbaaaaa"; "aaabbbbaaaaa"; "bbbbbbbaaaaa"; "aaaaabbbaaaa"; "aaaabbbbaaaa"; "aaabbbbbaaaa"; "bbbbbbbbaaaa"; "aaaaaabbbaaa"; "bbbaaabbbaaa"; "aaaaabbbbaaa"; "aaaabbbbbaaa"; "aaabbbbbbaaa"; "bbbbbbbbbaaa"; "aaaaaaaaabbb"; "bbbaaaaaabbb"; "bbbbaaaaabbb"; "bbbbbaaaabbb"; "aaabbbaaabbb"; "bbbbbbaaabbb"; "aaaaaaaabbbb"; "bbbaaaaabbbb"; "bbbbaaaabbbb"; "bbbbbaaabbbb"; "aaaaaaabbbbb"; "bbbaaaabbbbb"; "bbbbaaabbbbb"; "aaaaaabbbbbb"; "bbbaaabbbbbb"; "aaaaabbbbbbb"; "aaaabbbbbbbb"; "aaabbbbbbbbb"; "bbbbbbbbbbbb"]

let q2_c_m = 
[ "aaa"; "bbb"; "aaaa"; "bbbb"; "aaaaa"; "bbbbb"; "aaaaaa"; "bbbaaa"; "aaabbb"; "bbbbbb"; "aaaaaaa"; "bbbaaaa"; "bbbbaaa"; "aaaabbb"; "aaabbbb"; "bbbbbbb"; "aaaaaaaa"; "bbbaaaaa"; "bbbbaaaa"; "bbbbbaaa"; "aaaaabbb"; "aaaabbbb"; "aaabbbbb"; "bbbbbbbb"; "aaaaaaaaa"; "bbbaaaaaa"; "bbbbaaaaa"; "bbbbbaaaa"; "aaabbbaaa"; "bbbbbbaaa"; "aaaaaabbb"; "bbbaaabbb"; "aaaaabbbb"; "aaaabbbbb"; "aaabbbbbb"; "bbbbbbbbb"; "aaaaaaaaaa"; "bbbaaaaaaa"; "bbbbaaaaaa"; "bbbbbaaaaa"; "aaabbbaaaa"; "bbbbbbaaaa"; "aaaabbbaaa"; "aaabbbbaaa"; "bbbbbbbaaa"; "aaaaaaabbb"; "bbbaaaabbb"; "bbbbaaabbb"; "aaaaaabbbb"; "bbbaaabbbb"; "aaaaabbbbb"; "aaaabbbbbb"; "aaabbbbbbb"; "bbbbbbbbbb"; "aaaaaaaaaaa"; "bbbaaaaaaaa"; "bbbbaaaaaaa"; "bbbbbaaaaaa"; "aaabbbaaaaa"; "bbbbbbaaaaa"; "aaaabbbaaaa"; "aaabbbbaaaa"; "bbbbbbbaaaa"; "aaaaabbbaaa"; "aaaabbbbaaa"; "aaabbbbbaaa"; "bbbbbbbbaaa"; "aaaaaaaabbb"; "bbbaaaaabbb"; "bbbbaaaabbb"; "bbbbbaaabbb"; "aaaaaaabbbb"; "bbbaaaabbbb"; "bbbbaaabbbb"; "aaaaaabbbbb"; "bbbaaabbbbb"; "aaaaabbbbbb"; "aaaabbbbbbb"; "aaabbbbbbbb"; "bbbbbbbbbbb"; "aaaaaaaaaaaa"; "bbbaaaaaaaaa"; "bbbbaaaaaaaa"; "bbbbbaaaaaaa"; "aaabbbaaaaaa"; "bbbbbbaaaaaa"; "aaaabbbaaaaa"; "aaabbbbaaaaa"; "bbbbbbbaaaaa"; "aaaaabbbaaaa"; "aaaabbbbaaaa"; "aaabbbbbaaaa"; "bbbbbbbbaaaa"; "aaaaaabbbaaa"; "bbbaaabbbaaa"; "aaaaabbbbaaa"; "aaaabbbbbaaa"; "aaabbbbbbaaa"; "bbbbbbbbbaaa"; "aaaaaaaaabbb"; "bbbaaaaaabbb"; "bbbbaaaaabbb"; "bbbbbaaaabbb"; "aaabbbaaabbb"; "bbbbbbaaabbb"; "aaaaaaaabbbb"; "bbbaaaaabbbb"; "bbbbaaaabbbb"; "bbbbbaaabbbb"; "aaaaaaabbbbb"; "bbbaaaabbbbb"; "bbbbaaabbbbb"; "aaaaaabbbbbb"; "bbbaaabbbbbb"; "aaaaabbbbbbb"; "aaaabbbbbbbb"; "aaabbbbbbbbb"; "bbbbbbbbbbbb"]

let q2_d_a =
[ "a"; "b"; "aa"; "ba"; "ab"; "bb"; "aaa"; "baa"; "aba"; "bba"; "aab"; "bab"; "abb"; "bbb"; "aaaa"; "baaa"; "abaa"; "bbaa"; "aaba"; "baba"; "abba"; "bbba"; "baab"; "abab"; "bbab"; "aabb"; "babb"; "abbb"; "bbbb"; "aaaaa"; "baaaa"; "abaaa"; "bbaaa"; "aabaa"; "babaa"; "abbaa"; "bbbaa"; "aaaba"; "baaba"; "ababa"; "bbaba"; "aabba"; "babba"; "abbba"; "bbbba"; "baaab"; "abaab"; "bbaab"; "aabab"; "babab"; "abbab"; "bbbab"; "baabb"; "ababb"; "bbabb"; "aabbb"; "babbb"; "abbbb"; "bbbbb"; "aaaaaa"; "baaaaa"; "abaaaa"; "bbaaaa"; "aabaaa"; "babaaa"; "abbaaa"; "bbbaaa"; "aaabaa"; "baabaa"; "ababaa"; "bbabaa"; "aabbaa"; "babbaa"; "abbbaa"; "bbbbaa"; "aaaaba"; "baaaba"; "abaaba"; "bbaaba"; "aababa"; "bababa"; "abbaba"; "bbbaba"; "aaabba"; "baabba"; "ababba"; "bbabba"; "aabbba"; "babbba"; "abbbba"; "bbbbba"; "baaaab"; "abaaab"; "bbaaab"; "aabaab"; "babaab"; "abbaab"; "bbbaab"; "baabab"; "ababab"; "bbabab"; "aabbab"; "babbab"; "abbbab"; "bbbbab"; "baaabb"; "abaabb"; "bbaabb"; "aababb"; "bababb"; "abbabb"; "bbbabb"; "baabbb"; "ababbb"; "bbabbb"; "aabbbb"; "babbbb"; "abbbbb"; "bbbbbb"; "aaaaaaa"; "baaaaaa"; "abaaaaa"; "bbaaaaa"; "aabaaaa"; "babaaaa"; "abbaaaa"; "bbbaaaa"; "aaabaaa"; "baabaaa"; "ababaaa"; "bbabaaa"; "aabbaaa"; "babbaaa"; "abbbaaa"; "bbbbaaa"; "aaaabaa"; "baaabaa"; "abaabaa"; "bbaabaa"; "aababaa"; "bababaa"; "abbabaa"; "bbbabaa"; "aaabbaa"; "baabbaa"; "ababbaa"; "bbabbaa"; "aabbbaa"; "babbbaa"; "abbbbaa"; "bbbbbaa"; "aaaaaba"; "baaaaba"; "abaaaba"; "bbaaaba"; "aabaaba"; "babaaba"; "abbaaba"; "bbbaaba"; "aaababa"; "baababa"; "abababa"; "bbababa"; "aabbaba"; "babbaba"; "abbbaba"; "bbbbaba"; "aaaabba"; "baaabba"; "abaabba"; "bbaabba"; "aababba"; "bababba"; "abbabba"; "bbbabba"; "aaabbba"; "baabbba"; "ababbba"; "bbabbba"; "aabbbba"; "babbbba"; "abbbbba"; "bbbbbba"; "baaaaab"; "abaaaab"; "bbaaaab"; "aabaaab"; "babaaab"; "abbaaab"; "bbbaaab"; "baabaab"; "ababaab"; "bbabaab"; "aabbaab"; "babbaab"; "abbbaab"; "bbbbaab"; "baaabab"; "abaabab"; "bbaabab"; "aababab"; "bababab"; "abbabab"; "bbbabab"; "baabbab"; "ababbab"; "bbabbab"; "aabbbab"; "babbbab"; "abbbbab"; "bbbbbab"; "baaaabb"; "abaaabb"; "bbaaabb"; "aabaabb"; "babaabb"; "abbaabb"; "bbbaabb"; "baababb"; "abababb"; "bbababb"; "aabbabb"; "babbabb"; "abbbabb"; "bbbbabb"; "baaabbb"; "abaabbb"; "bbaabbb"; "aababbb"; "bababbb"; "abbabbb"; "bbbabbb"; "baabbbb"; "ababbbb"; "bbabbbb"; "aabbbbb"; "babbbbb"; "abbbbbb"; "bbbbbbb"]

let q2_d_m = 
[ "a"; "b"; "aa"; "ba"; "ab"; "bb"; "aaa"; "baa"; "aba"; "bba"; "aab"; "bab"; "abb"; "bbb"; "aaaa"; "baaa"; "abaa"; "bbaa"; "aaba"; "baba"; "abba"; "bbba"; "baab"; "abab"; "bbab"; "aabb"; "babb"; "abbb"; "bbbb"; "aaaaa"; "baaaa"; "abaaa"; "bbaaa"; "aabaa"; "babaa"; "abbaa"; "bbbaa"; "aaaba"; "baaba"; "ababa"; "bbaba"; "aabba"; "babba"; "abbba"; "bbbba"; "baaab"; "abaab"; "bbaab"; "aabab"; "babab"; "abbab"; "bbbab"; "baabb"; "ababb"; "bbabb"; "aabbb"; "babbb"; "abbbb"; "bbbbb"; "aaaaaa"; "baaaaa"; "abaaaa"; "bbaaaa"; "aabaaa"; "babaaa"; "abbaaa"; "bbbaaa"; "aaabaa"; "baabaa"; "ababaa"; "bbabaa"; "aabbaa"; "babbaa"; "abbbaa"; "bbbbaa"; "aaaaba"; "baaaba"; "abaaba"; "bbaaba"; "aababa"; "bababa"; "abbaba"; "bbbaba"; "aaabba"; "baabba"; "ababba"; "bbabba"; "aabbba"; "babbba"; "abbbba"; "bbbbba"; "baaaab"; "abaaab"; "bbaaab"; "aabaab"; "babaab"; "abbaab"; "bbbaab"; "baabab"; "ababab"; "bbabab"; "aabbab"; "babbab"; "abbbab"; "bbbbab"; "baaabb"; "abaabb"; "bbaabb"; "aababb"; "bababb"; "abbabb"; "bbbabb"; "baabbb"; "ababbb"; "bbabbb"; "aabbbb"; "babbbb"; "abbbbb"; "bbbbbb"; "aaaaaaa"; "baaaaaa"; "abaaaaa"; "bbaaaaa"; "aabaaaa"; "babaaaa"; "abbaaaa"; "bbbaaaa"; "aaabaaa"; "baabaaa"; "ababaaa"; "bbabaaa"; "aabbaaa"; "babbaaa"; "abbbaaa"; "bbbbaaa"; "aaaabaa"; "baaabaa"; "abaabaa"; "bbaabaa"; "aababaa"; "bababaa"; "abbabaa"; "bbbabaa"; "aaabbaa"; "baabbaa"; "ababbaa"; "bbabbaa"; "aabbbaa"; "babbbaa"; "abbbbaa"; "bbbbbaa"; "aaaaaba"; "baaaaba"; "abaaaba"; "bbaaaba"; "aabaaba"; "babaaba"; "abbaaba"; "bbbaaba"; "aaababa"; "baababa"; "abababa"; "bbababa"; "aabbaba"; "babbaba"; "abbbaba"; "bbbbaba"; "aaaabba"; "baaabba"; "abaabba"; "bbaabba"; "aababba"; "bababba"; "abbabba"; "bbbabba"; "aaabbba"; "baabbba"; "ababbba"; "bbabbba"; "aabbbba"; "babbbba"; "abbbbba"; "bbbbbba"; "baaaaab"; "abaaaab"; "bbaaaab"; "aabaaab"; "babaaab"; "abbaaab"; "bbbaaab"; "baabaab"; "ababaab"; "bbabaab"; "aabbaab"; "babbaab"; "abbbaab"; "bbbbaab"; "baaabab"; "abaabab"; "bbaabab"; "aababab"; "bababab"; "abbabab"; "bbbabab"; "baabbab"; "ababbab"; "bbabbab"; "aabbbab"; "babbbab"; "abbbbab"; "bbbbbab"; "baaaabb"; "abaaabb"; "bbaaabb"; "aabaabb"; "babaabb"; "abbaabb"; "bbbaabb"; "baababb"; "abababb"; "bbababb"; "aabbabb"; "babbabb"; "abbbabb"; "bbbbabb"; "baaabbb"; "abaabbb"; "bbaabbb"; "aababbb"; "bababbb"; "abbabbb"; "bbbabbb"; "baabbbb"; "ababbbb"; "bbabbbb"; "aabbbbb"; "babbbbb"; "abbbbbb"; "bbbbbbb"]

let q3_m = 
[ "bbb"; "abbb"; "bbbb"; "cbbb"; "aabbb"; "babbb"; "cabbb"; "abbbb"; "bbbbb"; "cbbbb"; "acbbb"; "bcbbb"; "ccbbb"; "aaabbb"; "baabbb"; "caabbb"; "ababbb"; "bbabbb"; "cbabbb"; "acabbb"; "bcabbb"; "ccabbb"; "aabbbb"; "babbbb"; "cabbbb"; "abbbbb"; "bbbbbb"; "cbbbbb"; "acbbbb"; "bcbbbb"; "ccbbbb"; "aacbbb"; "bacbbb"; "cacbbb"; "abcbbb"; "bbcbbb"; "cbcbbb"; "accbbb"; "bccbbb"; "cccbbb"; "aaaabbb"; "baaabbb"; "caaabbb"; "abaabbb"; "bbaabbb"; "cbaabbb"; "acaabbb"; "bcaabbb"; "ccaabbb"; "aababbb"; "bababbb"; "cababbb"; "abbabbb"; "bbbabbb"; "cbbabbb"; "acbabbb"; "bcbabbb"; "ccbabbb"; "aacabbb"; "bacabbb"; "cacabbb"; "abcabbb"; "bbcabbb"; "cbcabbb"; "accabbb"; "bccabbb"; "cccabbb"; "aaabbbb"; "baabbbb"; "caabbbb"; "ababbbb"; "bbabbbb"; "cbabbbb"; "acabbbb"; "bcabbbb"; "ccabbbb"; "aabbbbb"; "babbbbb"; "cabbbbb"; "abbbbbb"; "bbbbbbb"; "cbbbbbb"; "acbbbbb"; "bcbbbbb"; "ccbbbbb"; "aacbbbb"; "bacbbbb"; "cacbbbb"; "abcbbbb"; "bbcbbbb"; "cbcbbbb"; "accbbbb"; "bccbbbb"; "cccbbbb"; "aaacbbb"; "baacbbb"; "caacbbb"; "abacbbb"; "bbacbbb"; "cbacbbb"; "acacbbb"; "bcacbbb"; "ccacbbb"; "aabcbbb"; "babcbbb"; "cabcbbb"; "abbcbbb"; "bbbcbbb"; "cbbcbbb"; "acbcbbb"; "bcbcbbb"; "ccbcbbb"; "aaccbbb"; "baccbbb"; "caccbbb"; "abccbbb"; "bbccbbb"; "cbccbbb"; "acccbbb"; "bcccbbb"; "ccccbbb"]

let q3_a = 
[ "bbb"; "abbb"; "bbbb"; "cbbb"; "aabbb"; "babbb"; "cabbb"; "abbbb"; "bbbbb"; "cbbbb"; "acbbb"; "bcbbb"; "ccbbb"; "aaabbb"; "baabbb"; "caabbb"; "ababbb"; "bbabbb"; "cbabbb"; "acabbb"; "bcabbb"; "ccabbb"; "aabbbb"; "babbbb"; "cabbbb"; "abbbbb"; "bbbbbb"; "cbbbbb"; "acbbbb"; "bcbbbb"; "ccbbbb"; "aacbbb"; "bacbbb"; "cacbbb"; "abcbbb"; "bbcbbb"; "cbcbbb"; "accbbb"; "bccbbb"; "cccbbb"; "aaaabbb"; "baaabbb"; "caaabbb"; "abaabbb"; "bbaabbb"; "cbaabbb"; "acaabbb"; "bcaabbb"; "ccaabbb"; "aababbb"; "bababbb"; "cababbb"; "abbabbb"; "bbbabbb"; "cbbabbb"; "acbabbb"; "bcbabbb"; "ccbabbb"; "aacabbb"; "bacabbb"; "cacabbb"; "abcabbb"; "bbcabbb"; "cbcabbb"; "accabbb"; "bccabbb"; "cccabbb"; "aaabbbb"; "baabbbb"; "caabbbb"; "ababbbb"; "bbabbbb"; "cbabbbb"; "acabbbb"; "bcabbbb"; "ccabbbb"; "aabbbbb"; "babbbbb"; "cabbbbb"; "abbbbbb"; "bbbbbbb"; "cbbbbbb"; "acbbbbb"; "bcbbbbb"; "ccbbbbb"; "aacbbbb"; "bacbbbb"; "cacbbbb"; "abcbbbb"; "bbcbbbb"; "cbcbbbb"; "accbbbb"; "bccbbbb"; "cccbbbb"; "aaacbbb"; "baacbbb"; "caacbbb"; "abacbbb"; "bbacbbb"; "cbacbbb"; "acacbbb"; "bcacbbb"; "ccacbbb"; "aabcbbb"; "babcbbb"; "cabcbbb"; "abbcbbb"; "bbbcbbb"; "cbbcbbb"; "acbcbbb"; "bcbcbbb"; "ccbcbbb"; "aaccbbb"; "baccbbb"; "caccbbb"; "abccbbb"; "bbccbbb"; "cbccbbb"; "acccbbb"; "bcccbbb"; "ccccbbb"]

let q2_a_m = 
[ ""; "a"; "b"; "aa"; "ba"; "ab"; "bb"; "aaa"; "baa"; "aba"; "bba"; "aab"; "bab"; "abb"; "aaaa"; "baaa"; "abaa"; "bbaa"; "aaba"; "baba"; "abba"; "aaab"; "baab"; "abab"; "bbab"; "aabb"; "babb"; "aaaaa"; "baaaa"; "abaaa"; "bbaaa"; "aabaa"; "babaa"; "abbaa"; "aaaba"; "baaba"; "ababa"; "bbaba"; "aabba"; "babba"; "aaaab"; "baaab"; "abaab"; "bbaab"; "aabab"; "babab"; "abbab"; "aaabb"; "baabb"; "ababb"; "bbabb"; "aaaaaa"; "baaaaa"; "abaaaa"; "bbaaaa"; "aabaaa"; "babaaa"; "abbaaa"; "aaabaa"; "baabaa"; "ababaa"; "bbabaa"; "aabbaa"; "babbaa"; "aaaaba"; "baaaba"; "abaaba"; "bbaaba"; "aababa"; "bababa"; "abbaba"; "aaabba"; "baabba"; "ababba"; "bbabba"; "aaaaab"; "baaaab"; "abaaab"; "bbaaab"; "aabaab"; "babaab"; "abbaab"; "aaabab"; "baabab"; "ababab"; "bbabab"; "aabbab"; "babbab"; "aaaabb"; "baaabb"; "abaabb"; "bbaabb"; "aababb"; "bababb"; "abbabb"]

let q2_a_a = 
[ ""; "a"; "b"; "aa"; "ba"; "ab"; "bb"; "aaa"; "baa"; "aba"; "bba"; "aab"; "bab"; "abb"; "aaaa"; "baaa"; "abaa"; "bbaa"; "aaba"; "baba"; "abba"; "aaab"; "baab"; "abab"; "bbab"; "aabb"; "babb"; "aaaaa"; "baaaa"; "abaaa"; "bbaaa"; "aabaa"; "babaa"; "abbaa"; "aaaba"; "baaba"; "ababa"; "bbaba"; "aabba"; "babba"; "aaaab"; "baaab"; "abaab"; "bbaab"; "aabab"; "babab"; "abbab"; "aaabb"; "baabb"; "ababb"; "bbabb"; "aaaaaa"; "baaaaa"; "abaaaa"; "bbaaaa"; "aabaaa"; "babaaa"; "abbaaa"; "aaabaa"; "baabaa"; "ababaa"; "bbabaa"; "aabbaa"; "babbaa"; "aaaaba"; "baaaba"; "abaaba"; "bbaaba"; "aababa"; "bababa"; "abbaba"; "aaabba"; "baabba"; "ababba"; "bbabba"; "aaaaab"; "baaaab"; "abaaab"; "bbaaab"; "aabaab"; "babaab"; "abbaab"; "aaabab"; "baabab"; "ababab"; "bbabab"; "aabbab"; "babbab"; "aaaabb"; "baaabb"; "abaabb"; "bbaabb"; "aababb"; "bababb"; "abbabb"]
